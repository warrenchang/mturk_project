from otree.api import (
    models, widgets, BaseConstants, BaseSubsession, BaseGroup, BasePlayer,
    Currency as c, currency_range
)

import numpy as np

author = 'Your name here'

doc = """
Simply gamble choice for risk preference elicitation
"""


class Constants(BaseConstants):
    name_in_url = 'multiarm_bandit'
    players_per_group = None
    history_template = 'multiarm_bandit//History.html'
    history_previous_template = 'multiarm_bandit//History_previous.html'
    info_round = 20 ## new information is added after info_round

    deltas1 = [4,4,4,4,4]
    deltas2 = [4,4,4,4,4]


    interaction_length = [4,4,4]
    round_in_interactions = np.tile(np.arange(4)+1, reps=3)
    interactions = np.tile(np.arange(3) + 1, reps=(4, 1)).T.flatten()

    interaction_length = [50,50,50]
    round_in_interactions = np.tile(np.arange(50)+1, reps=3)
    interactions = np.tile(np.arange(3) + 1, reps=(50, 1)).T.flatten()

    mus1 = np.array([
       [69. , 41. , 39. , 71. , 50. ],
       [65.6, 39.1, 40.4, 66.8, 46.7],
       [62.8, 34.4, 35.8, 69. , 44.1],
       [58.3, 33.1, 40.6, 67.7, 45.6],
       [57.8, 31.4, 37.8, 61. , 46.9],
       [58. , 35.8, 40.1, 58.1, 49.5],
       [55.1, 37.6, 37.3, 55. , 51.7],
       [54.4, 35. , 44. , 53.1, 50.8],
       [53.9, 33.6, 38.3, 50.4, 50.1],
       [59.1, 36. , 39.2, 51.2, 50.4],
       [66. , 42.7, 43. , 49.6, 49.2],
       [67.9, 45. , 36.7, 53.4, 43.5],
       [64. , 46.8, 41.2, 54. , 45.7],
       [61.9, 41.3, 40.5, 56.2, 48.2],
       [61.1, 43.4, 35.5, 53.5, 50.2],
       [57. , 41.9, 39.4, 57.9, 46.4],
       [58.7, 45.2, 44.2, 62.7, 51.3],
       [57.8, 44.7, 43.1, 63.8, 49. ],
       [55.4, 48.3, 40.1, 65.4, 53.2],
       [51.8, 51.1, 40.5, 67.5, 46.9],
       [49.8, 50.3, 40.4, 64.7, 49.8],
       [48.8, 50.9, 43.5, 68.1, 48.1],
       [48.1, 50. , 38.5, 73.9, 49. ],
       [42.9, 54.6, 38.8, 75.2, 51.9],
       [41.1, 54.3, 39. , 75.8, 57. ],
       [41.7, 58.7, 40. , 72.4, 57.4],
       [43.1, 57.6, 34.4, 74.4, 58.1],
       [43.9, 56.3, 41.1, 77.3, 61.3],
       [42.6, 54.7, 41.6, 75.3, 64. ],
       [42.2, 57.4, 44.2, 76.1, 65.9],
       [44.8, 53.1, 43.6, 76. , 66.9],
       [42.8, 60.7, 43.6, 71.1, 67.5],
       [44.9, 58.1, 42.9, 68.3, 70. ],
       [45.5, 56. , 46.2, 66.4, 63.6],
       [46.7, 58.1, 48.8, 64.8, 65.8],
       [44.4, 60.3, 52. , 61.7, 68.8],
       [41.8, 60.8, 52.5, 64.6, 64.2],
       [42.4, 59.3, 52.3, 61.3, 66.1],
       [47.2, 58.9, 51.5, 56.9, 67.1],
       [50.8, 60.5, 52.1, 57.2, 67.2],
       [45. , 60.3, 50. , 57.1, 71.1],
       [41.5, 58.6, 51.5, 58.1, 72.3],
       [44.5, 59.6, 53.6, 60. , 71.7],
       [47.6, 61.9, 54. , 59.3, 73.9],
       [46.5, 61.8, 54.7, 60.8, 71.8],
       [39.5, 63.7, 58.2, 65.8, 73.2],
       [39.7, 58.9, 61.5, 64.5, 71.4],
       [39.6, 56.8, 63.6, 65. , 70. ],
       [33.5, 52.5, 63.3, 61.9, 78. ],
       [36.7, 54.8, 67.2, 61.5, 74.2],
       [40. , 55.2, 31.2, 56.8, 32.8],
       [37.4, 52.5, 32.3, 53.4, 31.2],
       [35.3, 50.3, 28.6, 55.2, 27.5],
       [36.4, 46.6, 32.5, 54.1, 26.5],
       [37.5, 46.2, 30.3, 48.8, 25.1],
       [39.6, 46.4, 32.1, 46.5, 28.6],
       [41.3, 44.1, 29.8, 44. , 30.1],
       [40.6, 43.5, 35.2, 42.5, 28. ],
       [40.1, 43.1, 30.6, 40.3, 26.9],
       [40.3, 47.3, 31.4, 41. , 28.8],
       [39.4, 52.8, 34.4, 39.7, 34.2],
       [34.8, 54.3, 29.4, 42.8, 36. ],
       [36.5, 51.2, 32.9, 43.2, 37.4],
       [38.6, 49.6, 32.4, 44.9, 33.1],
       [40.2, 48.9, 28.4, 42.8, 34.8],
       [37.1, 45.6, 31.5, 46.3, 33.5],
       [41.1, 47. , 35.4, 50.1, 36.2],
       [39.2, 46.2, 34.5, 51.1, 35.7],
       [42.5, 44.3, 32.1, 52.3, 38.6],
       [37.6, 41.4, 32.4, 54. , 40.9],
       [39.8, 39.8, 32.3, 51.8, 40.2],
       [38.5, 39. , 34.8, 54.5, 40.7],
       [39.2, 38.5, 30.8, 59.1, 40. ],
       [41.5, 34.3, 31. , 60.2, 43.7],
       [45.6, 32.8, 31.2, 60.6, 43.5],
       [46. , 33.4, 32. , 57.9, 47. ],
       [46.5, 34.4, 27.5, 59.5, 46.1],
       [49. , 35.1, 32.9, 61.8, 45.1],
       [51.2, 34.1, 33.3, 60.2, 43.8],
       [52.8, 33.7, 35.3, 60.9, 45.9],
       [53.5, 35.8, 34.8, 60.8, 42.5],
       [54. , 34.2, 34.9, 56.9, 48.6],
       [56. , 35.9, 34.3, 54.7, 46.5],
       [50.9, 36.4, 36.9, 53.1, 44.8],
       [52.6, 37.4, 39. , 51.8, 46.5],
       [55. , 35.5, 41.6, 49.4, 48.2],
       [51.3, 33.4, 42. , 51.7, 48.7],
       [52.9, 33.9, 41.9, 49.1, 47.5],
       [53.7, 37.7, 41.2, 45.5, 47.1],
       [53.7, 40.7, 41.6, 45.8, 48.4],
       [56.9, 36. , 40. , 45.7, 48.2],
       [57.8, 33.2, 41.2, 46.5, 46.9],
       [57.4, 35.6, 42.9, 48. , 47.7],
       [59.1, 38.1, 43.2, 47.4, 49.5],
       [57.5, 37.2, 43.8, 48.6, 49.4],
       [58.6, 31.6, 46.6, 52.6, 51. ],
       [57.1, 31.8, 49.2, 51.6, 47.1],
       [56. , 31.7, 50.8, 52. , 45.4],
       [62.4, 26.8, 50.6, 49.5, 42. ],
       [59.4, 29.4, 53.7, 49.2, 43.9],
       [46.8, 85.2, 49.2, 82.8, 60. ],
       [48.5, 80.1, 46.9, 78.7, 56. ],
       [42.9, 82.8, 41.2, 75.4, 52.9],
       [48.7, 81.2, 39.8, 69.9, 54.7],
       [45.4, 73.2, 37.7, 69.3, 56.3],
       [48.2, 69.7, 43. , 69.6, 59.4],
       [44.7, 66. , 45.2, 66.1, 62. ],
       [52.7, 63.7, 42. , 65.3, 61. ],
       [46. , 60.5, 40.3, 64.7, 60.2],
       [47.1, 61.5, 43.2, 70.9, 60.5],
       [51.6, 59.5, 51.3, 79.2, 59.1],
       [44. , 64.1, 53.9, 81.4, 52.2],
       [49.4, 64.7, 56.1, 76.8, 54.8],
       [48.6, 67.4, 49.6, 74.3, 57.8],
       [42.5, 64.2, 52.1, 73.3, 60.2],
       [47.3, 69.4, 50.3, 68.4, 55.7],
       [53.1, 75.2, 54.3, 70.4, 61.6],
       [51.7, 76.6, 53.6, 69.3, 58.8],
       [48.1, 78.4, 57.9, 66.5, 63.8],
       [48.7, 80.9, 61.3, 62.2, 56.3],
       [48.5, 77.6, 60.3, 59.7, 59.7],
       [52.2, 81.7, 61.1, 58.6, 57.7],
       [46.2, 88.7, 60. , 57.8, 58.8],
       [46.5, 90.3, 65.5, 51.5, 62.2],
       [46.8, 90.9, 65.2, 49.3, 68.4],
       [48. , 86.9, 70.5, 50.1, 68.9],
       [41.2, 89.3, 69.1, 51.7, 69.7],
       [49.4, 92.7, 67.6, 52.6, 73.5],
       [49.9, 90.3, 65.7, 51.2, 76.8],
       [53. , 91.3, 68.9, 50.6, 79.1],
       [52.3, 91.2, 63.7, 53.7, 80.3],
       [52.3, 85.4, 72.9, 51.3, 81. ],
       [51.4, 82. , 69.7, 53.9, 84. ],
       [55.4, 79.6, 67.2, 54.6, 76.4],
       [58.6, 77.8, 69.7, 56.1, 78.9],
       [62.4, 74.1, 72.3, 53.2, 82.6],
       [63. , 77.5, 73. , 50.2, 77. ],
       [62.8, 73.6, 71.2, 50.9, 79.3],
       [61.8, 68.3, 70.6, 56.6, 80.5],
       [62.5, 68.6, 72.6, 61. , 80.6],
       [60. , 68.6, 72.4, 54. , 85.3],
       [61.8, 69.7, 70.3, 49.8, 86.7],
       [64.3, 72.1, 71.5, 53.3, 86.1],
       [64.8, 71.2, 74.3, 57.1, 88.7],
       [65.6, 73. , 74.1, 55.8, 86.2],
       [69.9, 78.9, 76.5, 47.4, 87.9],
       [73.8, 77.3, 70.7, 47.7, 85.7],
       [76.3, 78. , 68.1, 47.6, 84. ],
       [76. , 74.2, 63. , 40.2, 93.6],
       [80.6, 73.9, 65.8, 44.1, 89.1]])

    mus2 = np.array([
       [40. , 55.2, 31.2, 56.8, 32.8],
       [37.4, 52.5, 32.3, 53.4, 31.2],
       [35.3, 50.3, 28.6, 55.2, 27.5],
       [36.4, 46.6, 32.5, 54.1, 26.5],
       [37.5, 46.2, 30.3, 48.8, 25.1],
       [39.6, 46.4, 32.1, 46.5, 28.6],
       [41.3, 44.1, 29.8, 44. , 30.1],
       [40.6, 43.5, 35.2, 42.5, 28. ],
       [40.1, 43.1, 30.6, 40.3, 26.9],
       [40.3, 47.3, 31.4, 41. , 28.8],
       [39.4, 52.8, 34.4, 39.7, 34.2],
       [34.8, 54.3, 29.4, 42.8, 36. ],
       [36.5, 51.2, 32.9, 43.2, 37.4],
       [38.6, 49.6, 32.4, 44.9, 33.1],
       [40.2, 48.9, 28.4, 42.8, 34.8],
       [37.1, 45.6, 31.5, 46.3, 33.5],
       [41.1, 47. , 35.4, 50.1, 36.2],
       [39.2, 46.2, 34.5, 51.1, 35.7],
       [42.5, 44.3, 32.1, 52.3, 38.6],
       [37.6, 41.4, 32.4, 54. , 40.9],
       [39.8, 39.8, 32.3, 51.8, 40.2],
       [38.5, 39. , 34.8, 54.5, 40.7],
       [39.2, 38.5, 30.8, 59.1, 40. ],
       [41.5, 34.3, 31. , 60.2, 43.7],
       [45.6, 32.8, 31.2, 60.6, 43.5],
       [46. , 33.4, 32. , 57.9, 47. ],
       [46.5, 34.4, 27.5, 59.5, 46.1],
       [49. , 35.1, 32.9, 61.8, 45.1],
       [51.2, 34.1, 33.3, 60.2, 43.8],
       [52.8, 33.7, 35.3, 60.9, 45.9],
       [53.5, 35.8, 34.8, 60.8, 42.5],
       [54. , 34.2, 34.9, 56.9, 48.6],
       [56. , 35.9, 34.3, 54.7, 46.5],
       [50.9, 36.4, 36.9, 53.1, 44.8],
       [52.6, 37.4, 39. , 51.8, 46.5],
       [55. , 35.5, 41.6, 49.4, 48.2],
       [51.3, 33.4, 42. , 51.7, 48.7],
       [52.9, 33.9, 41.9, 49.1, 47.5],
       [53.7, 37.7, 41.2, 45.5, 47.1],
       [53.7, 40.7, 41.6, 45.8, 48.4],
       [56.9, 36. , 40. , 45.7, 48.2],
       [57.8, 33.2, 41.2, 46.5, 46.9],
       [57.4, 35.6, 42.9, 48. , 47.7],
       [59.1, 38.1, 43.2, 47.4, 49.5],
       [57.5, 37.2, 43.8, 48.6, 49.4],
       [58.6, 31.6, 46.6, 52.6, 51. ],
       [57.1, 31.8, 49.2, 51.6, 47.1],
       [56. , 31.7, 50.8, 52. , 45.4],
       [62.4, 26.8, 50.6, 49.5, 42. ],
       [59.4, 29.4, 53.7, 49.2, 43.9],
       [69. , 41. , 39. , 71. , 50. ],
       [65.6, 39.1, 40.4, 66.8, 46.7],
       [62.8, 34.4, 35.8, 69. , 44.1],
       [58.3, 33.1, 40.6, 67.7, 45.6],
       [57.8, 31.4, 37.8, 61. , 46.9],
       [58. , 35.8, 40.1, 58.1, 49.5],
       [55.1, 37.6, 37.3, 55. , 51.7],
       [54.4, 35. , 44. , 53.1, 50.8],
       [53.9, 33.6, 38.3, 50.4, 50.1],
       [59.1, 36. , 39.2, 51.2, 50.4],
       [66. , 42.7, 43. , 49.6, 49.2],
       [67.9, 45. , 36.7, 53.4, 43.5],
       [64. , 46.8, 41.2, 54. , 45.7],
       [61.9, 41.3, 40.5, 56.2, 48.2],
       [61.1, 43.4, 35.5, 53.5, 50.2],
       [57. , 41.9, 39.4, 57.9, 46.4],
       [58.7, 45.2, 44.2, 62.7, 51.3],
       [57.8, 44.7, 43.1, 63.8, 49. ],
       [55.4, 48.3, 40.1, 65.4, 53.2],
       [51.8, 51.1, 40.5, 67.5, 46.9],
       [49.8, 50.3, 40.4, 64.7, 49.8],
       [48.8, 50.9, 43.5, 68.1, 48.1],
       [48.1, 50. , 38.5, 73.9, 49. ],
       [42.9, 54.6, 38.8, 75.2, 51.9],
       [41.1, 54.3, 39. , 75.8, 57. ],
       [41.7, 58.7, 40. , 72.4, 57.4],
       [43.1, 57.6, 34.4, 74.4, 58.1],
       [43.9, 56.3, 41.1, 77.3, 61.3],
       [42.6, 54.7, 41.6, 75.3, 64. ],
       [42.2, 57.4, 44.2, 76.1, 65.9],
       [44.8, 53.1, 43.6, 76. , 66.9],
       [42.8, 60.7, 43.6, 71.1, 67.5],
       [44.9, 58.1, 42.9, 68.3, 70. ],
       [45.5, 56. , 46.2, 66.4, 63.6],
       [46.7, 58.1, 48.8, 64.8, 65.8],
       [44.4, 60.3, 52. , 61.7, 68.8],
       [41.8, 60.8, 52.5, 64.6, 64.2],
       [42.4, 59.3, 52.3, 61.3, 66.1],
       [47.2, 58.9, 51.5, 56.9, 67.1],
       [50.8, 60.5, 52.1, 57.2, 67.2],
       [45. , 60.3, 50. , 57.1, 71.1],
       [41.5, 58.6, 51.5, 58.1, 72.3],
       [44.5, 59.6, 53.6, 60. , 71.7],
       [47.6, 61.9, 54. , 59.3, 73.9],
       [46.5, 61.8, 54.7, 60.8, 71.8],
       [39.5, 63.7, 58.2, 65.8, 73.2],
       [39.7, 58.9, 61.5, 64.5, 71.4],
       [39.6, 56.8, 63.6, 65. , 70. ],
       [33.5, 52.5, 63.3, 61.9, 78. ],
       [36.7, 54.8, 67.2, 61.5, 74.2],
       [46.8, 85.2, 49.2, 82.8, 60. ],
       [48.5, 80.1, 46.9, 78.7, 56. ],
       [42.9, 82.8, 41.2, 75.4, 52.9],
       [48.7, 81.2, 39.8, 69.9, 54.7],
       [45.4, 73.2, 37.7, 69.3, 56.3],
       [48.2, 69.7, 43. , 69.6, 59.4],
       [44.7, 66. , 45.2, 66.1, 62. ],
       [52.7, 63.7, 42. , 65.3, 61. ],
       [46. , 60.5, 40.3, 64.7, 60.2],
       [47.1, 61.5, 43.2, 70.9, 60.5],
       [51.6, 59.5, 51.3, 79.2, 59.1],
       [44. , 64.1, 53.9, 81.4, 52.2],
       [49.4, 64.7, 56.1, 76.8, 54.8],
       [48.6, 67.4, 49.6, 74.3, 57.8],
       [42.5, 64.2, 52.1, 73.3, 60.2],
       [47.3, 69.4, 50.3, 68.4, 55.7],
       [53.1, 75.2, 54.3, 70.4, 61.6],
       [51.7, 76.6, 53.6, 69.3, 58.8],
       [48.1, 78.4, 57.9, 66.5, 63.8],
       [48.7, 80.9, 61.3, 62.2, 56.3],
       [48.5, 77.6, 60.3, 59.7, 59.7],
       [52.2, 81.7, 61.1, 58.6, 57.7],
       [46.2, 88.7, 60. , 57.8, 58.8],
       [46.5, 90.3, 65.5, 51.5, 62.2],
       [46.8, 90.9, 65.2, 49.3, 68.4],
       [48. , 86.9, 70.5, 50.1, 68.9],
       [41.2, 89.3, 69.1, 51.7, 69.7],
       [49.4, 92.7, 67.6, 52.6, 73.5],
       [49.9, 90.3, 65.7, 51.2, 76.8],
       [53. , 91.3, 68.9, 50.6, 79.1],
       [52.3, 91.2, 63.7, 53.7, 80.3],
       [52.3, 85.4, 72.9, 51.3, 81. ],
       [51.4, 82. , 69.7, 53.9, 84. ],
       [55.4, 79.6, 67.2, 54.6, 76.4],
       [58.6, 77.8, 69.7, 56.1, 78.9],
       [62.4, 74.1, 72.3, 53.2, 82.6],
       [63. , 77.5, 73. , 50.2, 77. ],
       [62.8, 73.6, 71.2, 50.9, 79.3],
       [61.8, 68.3, 70.6, 56.6, 80.5],
       [62.5, 68.6, 72.6, 61. , 80.6],
       [60. , 68.6, 72.4, 54. , 85.3],
       [61.8, 69.7, 70.3, 49.8, 86.7],
       [64.3, 72.1, 71.5, 53.3, 86.1],
       [64.8, 71.2, 74.3, 57.1, 88.7],
       [65.6, 73. , 74.1, 55.8, 86.2],
       [69.9, 78.9, 76.5, 47.4, 87.9],
       [73.8, 77.3, 70.7, 47.7, 85.7],
       [76.3, 78. , 68.1, 47.6, 84. ],
       [76. , 74.2, 63. , 40.2, 93.6],
       [80.6, 73.9, 65.8, 44.1, 89.1]])

    num_rounds = sum(interaction_length) # change num_rounds for testing purpose, but need to make sure that number_sequence


class Subsession(BaseSubsession):
    def creating_session(self):
        # this is run before the start of every round
        players = self.get_players()
        num_players = len(players)
        ppg = int(num_players/4)
        round_in_interaction = Constants.round_in_interactions[self.round_number-1]
        interaction_number = Constants.interactions[self.round_number-1]

        if self.round_number == 1:
            group_matrix = []
            if num_players % 4 == 0:
                for i in range(4):  ## devide participants into 4 groups
                    group_matrix.append(players[i:i + ppg])
            elif num_players % 4 == 1:
                group_matrix.append(players[:ppg+1])
                group_matrix.append(players[ppg+1:ppg*2+1])
                group_matrix.append(players[ppg*2+1:ppg*3+1])
                group_matrix.append(players[ppg*3+1:])
            elif num_players % 4 == 2:
                group_matrix.append(players[:ppg+1])
                group_matrix.append(players[ppg+1:ppg*2+2])
                group_matrix.append(players[ppg*2+2:ppg*3+2])
                group_matrix.append(players[ppg*3+2:])
            elif num_players % 4 == 3:
                group_matrix.append(players[:ppg+1])
                group_matrix.append(players[ppg+1:ppg*2+2])
                group_matrix.append(players[ppg*2+2:ppg*3+3])
                group_matrix.append(players[ppg*3+3:])
            self.set_group_matrix(group_matrix)
        else:  # otherwise, group structure is the same as in the previous round
            self.group_like_round(self.round_number-1)

        for p in players: # set interaction number and round number
            p.interaction_number = interaction_number
            p.round_in_interaction = round_in_interaction
            p.treatment = p.group.id_in_subsession
            p.group_size = len(p.group.get_players())


class Group(BaseGroup):
    pass


class Player(BasePlayer):
    choice = models.IntegerField(choices=[
        [0, 'A'],
        [1, 'B'],
        [2, 'C'],
        [3, 'D'],
        [4, 'E']]
    )
    mu = models.PositiveIntegerField()
    noise = models.FloatField()
    best_mu = models.PositiveIntegerField()
    ## it may be helpful to define treatment variable, making it easier for data analysis later

    timed_out = models.IntegerField()
    cum_payoff = models.CurrencyField()
    avg_payoff = models.FloatField()
    num_decisions = models.IntegerField()
    treatment = models.PositiveIntegerField()
    group_size = models.PositiveIntegerField()
    interaction_number = models.PositiveIntegerField()
    round_in_interaction = models.PositiveIntegerField()
    average_pay = models.FloatField() # average group payment
    max_pay = models.FloatField() # max group payment
